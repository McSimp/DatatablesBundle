{% block tommygnr_datatable %}

    {% block tommygnr_datatable_html %}

        <table cellpadding="0" cellspacing="0" border="0" class="{{ theme_tableClasses }}" id="{{ dt_tableId }}" width="100%">
            <thead>
                {% for column in dt_columns %}
                    {% if column.filterable %}
                        <th
                            data-filter-target="{{ loop.index0 }}"
                            {% if column.filterSeeded %}
                                data-filter-property="{{ column.property }}"
                            {% else %}
                                data-filter-type="text"
                            {% endif %}
                        ></th>
                    {% else %}
                        <th></th>
                    {% endif %}
                {% endfor %}
            </thead>
            <tbody>
            </tbody>
        </table>

    {% endblock %}

    {% block tommygnr_datatable_js %}

        <script>
            var table;

            $(document).ready(function () {

                var config = {
                    {% if dt_processing %}
                        "processing": true,
                    {% else %}
                        "processing": false,
                    {% endif %}
                    {% if dt_serverSide %}
                        "serverSide": true,
                        "ajax": "{{ dt_ajaxSource }}",
                    {% else %}
                        "data": {{ dt_data|raw }},
                    {% endif %}
                    {% if theme_pagination %}
                        "paginationType": "{{ theme_pagination }}",
                    {% endif %}
                    {% if theme_dom %}
                        "dom": "{{ theme_dom|raw }}",
                    {% endif %}
                    "displayLength": {{ dt_displayLength }},
                    {% if 'theme_jqueryUi' %}
                        "jQueryUI": true,
                    {% endif %}
                    {% if dt_defaultOrder %}
                        "order": [{% for col, order in dt_defaultOrder %}[ {{col}}, "{{order}}" ],{% endfor %}],
                    {% endif %}
                    "language": {
                        "processing": "{{ 'datatables.datatable.processing'|trans({}, 'messages') }}",
                        "lengthMenu": "{{ 'datatables.datatable.lengthMenu'|trans({}, 'messages') }}",
                        "zeroRecords": "{{ 'datatables.datatable.zeroRecords'|trans({}, 'messages') }}",
                        "info": "{{ 'datatables.datatable.info'|trans({}, 'messages') }}",
                        "infoEmpty": "{{ 'datatables.datatable.infoEmpty'|trans({}, 'messages') }}",
                        "infoFiltered": "{{ 'datatables.datatable.infoFiltered'|trans({}, 'messages') }}",
                        "infoPostFix": "{{ 'datatables.datatable.infoPostFix'|trans({}, 'messages') }}",
                        "search": "{{ 'datatables.datatable.search'|trans({}, 'messages') }}",
                        "url": "",
                        "paginate": {
                            "first": "{{ 'datatables.datatable.first'|trans({}, 'messages') }}",
                            "previous": "{{ 'datatables.datatable.previous'|trans({}, 'messages') }}",
                            "next": "{{ 'datatables.datatable.next'|trans({}, 'messages') }}",
                            "last": "{{ 'datatables.datatable.last'|trans({}, 'messages') }}"
                        }
                    },
                    "drawCallback": function( settings ) {
                        var api = this.api();

                        // Output the data for the visible rows to the browser's console
                        //console.log( api.rows( {page:'current'} ).data() );
                    },

                    "initComplete": function( settings, json ) {
                        for (target in json.columnFilterChoices) {
                            var output = '<select class="dt_columnFilter" style="width:100%;">';
                            //add blank row
                            output += '<option value=""></option>';
                            json.columnFilterChoices[target].forEach(function(entry){
                                output += '<option value="'+entry+'">' + entry +'</option>';
                            })
                            output += '</select>';

                            var th = $("th[data-filter-property='"+target+"']", this);
                            th.append(output);
                        }

                        $("th[data-filter-type='text']").each(function(el){
                            $(this).append("<input type='text' class='dt_columnFilter' style='width:100%;''>");
                        });

                        $('.dt_columnFilter').on('change', function(){
                            var $this = $(this);
                            var colIndex = $this.closest('th').data('filter-target');
                            filterDtColumn($this.val(), colIndex)
                        })
                    }
                };

                $.extend(config, {
                    "columns": [
                        {# columns #}
                        {% for column in dt_columns %}
                            {% include "TommyGNRDatatablesBundle:Column:" ~ column.getClassName ~ ".html.twig" %}
                        {% endfor %}
                    ]
                });

                var selector = "#{{ dt_tableId }}";
                table = $(selector).DataTable(config);

                function filterDtColumn(filter, colIndex) {
                    table.column(colIndex).search(filter).draw();
                }

                $(".multiselect_checkall").click(function(event) {
                    if(this.checked) {
                        $("input:checkbox.multiselect_checkbox").each(function() {
                            this.checked = true;
                        });
                    } else {
                        $("input:checkbox.multiselect_checkbox").each(function() {
                            this.checked = false;
                        });
                    }
                });
            });

            function getSelectedIds() {
                var ids = new Array();
                $("input:checkbox:checked.multiselect_checkbox").each(function(index, el){
                    ids.push($(el).val());
                })
                return ids;
            }

        </script>

    {% endblock %}

    {% block tommygnr_datatable_render_functions %}

        <script>

            function render_boolean_icons(data, type, full, trueIcon, falseIcon, trueLabel, falseLabel) {
                if ('' == trueIcon && '' == trueLabel) {
                    trueLabel = 'true';
                }

                if ('' == falseIcon && '' == falseLabel) {
                    falseLabel = 'false';
                }

                if (data == true) {
                    return "<span class='" + trueIcon + "'></span> " + trueLabel;
                } else {
                    return "<span class='" + falseIcon + "'></span> " + falseLabel;
                }
            }

            function render_datetime(data, type, full, localizedFormat) {
                if (typeof data.timestamp != 'undefined') {
                    moment.lang("{{ app.request.locale }}");
                    return moment.unix(data.timestamp).format(localizedFormat);
                } else {
                    return null;
                }
            }

            function render_timeago(data, type, full) {
                if (typeof data.timestamp != 'undefined') {
                    moment.lang("{{ app.request.locale }}");
                    return moment.unix(data.timestamp).fromNow();
                } else {
                    return null;
                }
            }

        </script>

    {% endblock %}

{% endblock  %}
