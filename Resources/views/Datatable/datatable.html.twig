{% block tommygnr_datatable %}

    {% block tommygnr_datatable_html %}

        <table cellpadding="0" cellspacing="0" border="0" class="{{ theme_tableClasses }}" id="{{ dt_tableId }}" width="100%">
            <thead>
                {% for column in dt_columns %}
                    {% if column.filterable %}
                        <th
                            data-filter-target="{{ loop.index0 }}"
                            {% if column.filterSeeded %}
                                data-filter-property="{{ column.property }}"
                            {% else %}
                                data-filter-type="text"
                            {% endif %}
                        ></th>
                    {% else %}
                        <th></th>
                    {% endif %}
                {% endfor %}
            </thead>
            <tbody>
            </tbody>
        </table>

    {% endblock %}

    {% block tommygnr_datatable_js %}

        <script>
            var table;

            $(document).ready(function () {

                var config = {
                    {% if dt_processing %}
                        "processing": true,
                    {% else %}
                        "processing": false,
                    {% endif %}
                    {% if dt_serverSide %}
                        "serverSide": true,
                        "ajax": "{{ dt_ajaxSource }}",
                    {% else %}
                        "data": {{ dt_data|raw }},
                    {% endif %}
                    {% if theme_pagination %}
                        "paginationType": "{{ theme_pagination }}",
                    {% endif %}
                    {% if theme_dom %}
                        "dom": "{{ theme_dom|raw }}",
                    {% endif %}
                    "displayLength": {{ dt_displayLength }},
                    {% if 'theme_jqueryUi' %}
                        "jQueryUI": true,
                    {% endif %}
                    {% if dt_defaultOrder %}
                        "order": [{% for col, order in dt_defaultOrder %}[ {{col}}, "{{order}}" ],{% endfor %}],
                    {% endif %}
                    {% if dt_stateSaving %}
                        "stateSave": true,
                    {% endif %}
                    {% if dt_stateDuration is defined %}
                        "stateDuration": {{ dt_stateDuration }},
                    {% endif %}
                    "language": {
                        "processing": "{{ 'datatables.datatable.processing'|trans({}, 'messages') }}",
                        "lengthMenu": "{{ 'datatables.datatable.lengthMenu'|trans({}, 'messages') }}",
                        "zeroRecords": "{{ 'datatables.datatable.zeroRecords'|trans({}, 'messages') }}",
                        "info": "{{ 'datatables.datatable.info'|trans({}, 'messages') }}",
                        "infoEmpty": "{{ 'datatables.datatable.infoEmpty'|trans({}, 'messages') }}",
                        "infoFiltered": "{{ 'datatables.datatable.infoFiltered'|trans({}, 'messages') }}",
                        "infoPostFix": "{{ 'datatables.datatable.infoPostFix'|trans({}, 'messages') }}",
                        "search": "{{ 'datatables.datatable.search'|trans({}, 'messages') }}",
                        "url": "",
                        "paginate": {
                            "first": "{{ 'datatables.datatable.first'|trans({}, 'messages') }}",
                            "previous": "{{ 'datatables.datatable.previous'|trans({}, 'messages') }}",
                            "next": "{{ 'datatables.datatable.next'|trans({}, 'messages') }}",
                            "last": "{{ 'datatables.datatable.last'|trans({}, 'messages') }}"
                        }
                    },
                    "drawCallback": function( settings ) {
                        {% if dt_serverSide %}
                            var api = this.api();
                            var json = api.ajax.json();
                        {% else %}
                            var json = table.ajax.json();
                        {% endif %}

                        var lastFilteredColIndex = handleStorageItem('get', 'lastFilteredColIndex');
                        var firstFilteredColIndex = handleStorageItem('get', 'firstFilteredColIndex');

                        var newColumnFilterChoices = {};
                        for (target in json.columnFilterChoices) {
                            var i = $("th[data-filter-property='"+target+"']").data('filter-target');
                            if (lastFilteredColIndex && i == lastFilteredColIndex) {
                                var filterChoices = handleStorageItem('get', 'lastFilteredColOptions');
                                newColumnFilterChoices[target] = filterChoices.split(',');
                            } else if (firstFilteredColIndex && i == firstFilteredColIndex) {
                                var filterChoices = handleStorageItem('get', 'firstFilteredColOptions');
                                newColumnFilterChoices[target] = filterChoices.split(',');
                            } else {
                                {% if dt_serverSide %}
                                    newColumnFilterChoices[target] = json.columnFilterChoices[target];
                                {% else %}
                                    var filterChoices = table.column(i).data().unique().toArray();
                                    newColumnFilterChoices[target] = filterChoices.filter(function(v){return v!==''});
                                {% endif %}
                            }
                        }
                        json.columnFilterChoices = newColumnFilterChoices;

                        for (target in json.columnFilterChoices) {
                            var th = $("th[data-filter-property='"+target+"']");
                            var searches = getSearches(th, table.settings());

                            th.find('select').html(getFilterOptions(json, target, searches));
                        }

                    },

                    "initComplete": function( settings, json ) {
                        for (target in json.columnFilterChoices) {
                            var th = $("th[data-filter-property='"+target+"']", this);
                            var searches = getSearches(th, settings);

                            var output = '<select class="dt_columnFilter" style="width:100%;">';
                            output += getFilterOptions(json, target, searches);
                            output += '</select>';

                            th.append(output);
                        }

                        $("th[data-filter-type='text']").each(function(el){
                            var searches = getSearches(this, settings);
                            $(this).append("<input type='text' class='dt_columnFilter' style='width:100%;' value='"+searches[0]+"'>");
                        });

                        $('.dt_columnFilter').on('click', function(e){
                            e.stopPropagation();
                        })

                        $('.dt_columnFilter').on('change', function(){
                            var $this = $(this);
                            var colIndex = $this.closest('th').data('filter-target');
                            var options = [];
                            $this.closest('th').find('select option').each(function() {
                                options.push($(this).val());
                            });

                            saveColumnFilters($this.val(), colIndex, options);
                            filterDtColumn($this.val(), colIndex)
                        });
                    }
                };

                $.extend(config, {
                    "columns": [
                        {# columns #}
                        {% for column in dt_columns %}
                            {% include "TommyGNRDatatablesBundle:Column:" ~ column.getClassName ~ ".html.twig" %}
                        {% endfor %}
                    ]
                });

                var selector = "#{{ dt_tableId }}";
                table = $(selector).DataTable(config);

                function filterDtColumn(filter, colIndex) {
                    table.column(colIndex).search(filter).draw();
                }

                function saveColumnFilters(filter, colIndex, options) {
                    if (filter != '') {
                        handleStorageItem('set', 'lastFilteredColIndex', colIndex);
                        handleStorageItem('set', 'lastFilteredColOptions', options.filter(function(v){return v!==''}));

                        var firstSearchedIndex = handleStorageItem('get', 'firstFilteredColIndex');
                        if (firstSearchedIndex == 'undefined' || firstSearchedIndex == null) {
                            handleStorageItem('set', 'firstFilteredColIndex', colIndex);
                            handleStorageItem('set', 'firstFilteredColOptions', options.filter(function(v){return v!==''}));
                        }
                    } else {
                        if (colIndex == handleStorageItem('get', 'firstFilteredColIndex')) {
                            handleStorageItem('remove', 'firstFilteredColIndex');
                            handleStorageItem('remove', 'firstFilteredColOptions');
                        } else if (colIndex == handleStorageItem('get', 'lastFilteredColIndex')) {
                            handleStorageItem('remove', 'lastFilteredColIndex');
                            handleStorageItem('remove', 'lastFilteredColOptions');
                        }
                    }
                }

                function getSearches( element, settings ) {
                    var dtSearchColIndex = $(element).attr('data-filter-target');
                    return table.columns(dtSearchColIndex).search();
                }

                function getFilterOptions(json, target, searches) {
                    //add blank row
                    var output = '<option value=""></option>';
                    json.columnFilterChoices[target].forEach(function(entry){
                        var selected = '';
                        if (searches[0] != '' && searches[0] == entry) {
                            selected = ' selected="selected"';
                        }
                        output += '<option value="'+entry+'"'+selected+'>' + entry +'</option>';
                    })

                    return output;
                }

                $(".multiselect_checkall").click(function(event) {
                    if(this.checked) {
                        $("input:checkbox.multiselect_checkbox").each(function() {
                            this.checked = true;
                        });
                    } else {
                        $("input:checkbox.multiselect_checkbox").each(function() {
                            this.checked = false;
                        });
                    }
                });

                function handleStorageItem(action, key, value) {
                    var storageKeys = [];
                    storageKeys['table'] = 'DataTables_{{ dt_tableId }}_'+window.location.pathname;
                    storageKeys['lastFilteredColIndex'] = 'Datatables_{{ dt_tableId }}_lastFilteredCol_index';
                    storageKeys['lastFilteredColOptions'] = 'Datatables_{{ dt_tableId }}_lastFilteredCol_options';
                    storageKeys['firstFilteredColIndex'] = 'Datatables_{{ dt_tableId }}_firstFilteredCol_index';
                    storageKeys['firstFilteredColOptions'] = 'Datatables_{{ dt_tableId }}_firstFilteredCol_options';

                    var useLS = {% if dt_stateDuration is defined and dt_stateDuration == "-1" %} false {% else %} true {% endif %};

                    if (action == 'remove') {
                        if (useLS) {
                            localStorage.removeItem(storageKeys[key]);
                        } else {
                            sessionStorage.removeItem(storageKeys[key]);
                        }
                    }

                    if (action == 'get') {
                        if (useLS) {
                            return localStorage.getItem(storageKeys[key]);
                        } else {
                            return sessionStorage.getItem(storageKeys[key]);
                        }
                    }

                    if (action == 'set' && value != 'undefined') {
                        if (useLS) {
                            localStorage.setItem(storageKeys[key], value);
                        } else {
                            sessionStorage.setItem(storageKeys[key], value);
                        }
                    }
                }

                {% if dt_clearStateEnabled %}
                    var clearBtn = '<div id="{{ dt_tableId }}_clearbtn" class="dataTables_clearbtn"><button type="button" class="btn btn-xs">Reset filters</button></div>';
                    $(selector).closest('.dataTables_wrapper').find('.dt_cb').replaceWith(clearBtn);

                    $(selector+'_wrapper').on('click', '.dataTables_clearbtn', function(event) {
                        handleStorageItem('remove', 'table');
                        handleStorageItem('remove', 'lastFilteredColIndex');
                        handleStorageItem('remove', 'lastFilteredColOptions');
                        handleStorageItem('remove', 'firstFilteredColIndex');
                        handleStorageItem('remove', 'firstFilteredColOptions');

                        location.reload();
                    });
                {% endif %}
            });

            function getSelectedIds() {
                var ids = new Array();
                $("input:checkbox:checked.multiselect_checkbox").each(function(index, el){
                    ids.push($(el).val());
                })
                return ids;
            }

        </script>

    {% endblock %}

    {% block tommygnr_datatable_render_functions %}

        <script>

            function render_boolean_icons(data, type, full, trueIcon, falseIcon, trueLabel, falseLabel) {
                if ('' == trueIcon && '' == trueLabel) {
                    trueLabel = 'true';
                }

                if ('' == falseIcon && '' == falseLabel) {
                    falseLabel = 'false';
                }

                if (data == true) {
                    return "<span class='" + trueIcon + "'></span> " + trueLabel;
                } else {
                    return "<span class='" + falseIcon + "'></span> " + falseLabel;
                }
            }

            function render_datetime(data, type, full, localizedFormat) {
                if (typeof data.timestamp != 'undefined') {
                    moment.lang("{{ app.request.locale }}");
                    return moment.unix(data.timestamp).format(localizedFormat);
                } else {
                    return null;
                }
            }

            function render_timeago(data, type, full) {
                if (typeof data.timestamp != 'undefined') {
                    moment.lang("{{ app.request.locale }}");
                    return moment.unix(data.timestamp).fromNow();
                } else {
                    return null;
                }
            }

        </script>

    {% endblock %}

{% endblock  %}
